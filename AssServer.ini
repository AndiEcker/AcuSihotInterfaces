[Settings]
logFile = '''".\\log\\AssServer_" + datetime.datetime.now().strftime("%%y%%m%%d_%%H%%M%%S_%%f") + ".log"'''
shClientIP = localhost
shClientPort = 12000

SUPPORTED_OCS = {
    # currently not implemented: PCO=PreCheckOut, GC=Guest Change, PRECHECKIN
    # old guest sync tests Sihot -> Postgres
    # 'GUEST-CREATE': [{'reqClass': 'ClientFromSihot', 'ocProcessors': ['oc_client_to_ass']}],
    # 'GUEST-CHANGE': [{'reqClass': 'ClientFromSihot', 'ocProcessors': ['oc_client_to_ass']}],
    # keep alive SXML interfaces
    'ACK': [dict(reqClass='Request', ocProcessors=['oc_keep_alive', ]), ],
    'LA': [dict(reqClass='Request', ocProcessors=['oc_keep_alive',]),],
    'TS': [dict(reqClass='Request', ocProcessors=['oc_keep_alive',]),],
    #  reservation changes SXML interface
    'CR': [dict(reqClass='ResChange', ocProcessors=['oc_res_change',]),],
    # SXML interface for allocation notification on room-checkin/-out/-move
    # .. which is Minibar/Wellness System Level I: CI, CO, RM and ACK (see SXML doc page 57)
    'CI': [dict(reqClass='RoomChange', ocProcessors=['oc_room_change',]),],
    'CO': [dict(reqClass='RoomChange', ocProcessors=['oc_room_change',]),],
    'RM': list((dict(reqClass='RoomChange', ocProcessors=['oc_room_change',]),))
    }

# operation codes that will not be processed (no notification will be sent to user, only ACK will be send back to Sihot)
IGNORED_OCS = []

# SF error message fragments that will be repeated with wiped rgr_sf_id on sf_res_upsert() call
SfIdResetResendFragments = ['ENTITY_IS_DELETED', 'Not Reservation found',
    'INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY', 'REQUIRED_FIELD_MISSING']
